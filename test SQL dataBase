-- 1. Create/Use Database
CREATE DATABASE IF NOT EXISTS movie_rental;
USE movie_rental;

-- 2. Genres Table
CREATE TABLE IF NOT EXISTS Genres (
    genre_id INT AUTO_INCREMENT PRIMARY KEY,
    genre_name VARCHAR(50) NOT NULL UNIQUE
);

-- 3. Movies Table
CREATE TABLE IF NOT EXISTS Movies (
    movie_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    year INT,
    rating VARCHAR(10),
    price DECIMAL(5,2),
    image VARCHAR(100) DEFAULT 'default.jpg'
);

-- 4. MovieGenres Table (Many-to-Many Relationship)
CREATE TABLE IF NOT EXISTS MovieGenres (
    movie_id INT,
    genre_id INT,
    PRIMARY KEY (movie_id, genre_id),
    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES Genres(genre_id) ON DELETE CASCADE
);

-- 5. Logins Table (User Authentication)
CREATE TABLE IF NOT EXISTS Logins (
    login_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'user') DEFAULT 'user'
);

-- 6. User_Accounts Table (General Account Details)
CREATE TABLE IF NOT EXISTS User_Accounts (
    account_id INT AUTO_INCREMENT PRIMARY KEY,
    login_id INT UNIQUE NOT NULL,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    phone VARCHAR(15),
    FOREIGN KEY (login_id) REFERENCES Logins(login_id) ON DELETE CASCADE
);

-- 7. Customers Table (Tracks Customer Activity)
-- This table stores additional customer-specific info, for example, total money spent.
CREATE TABLE IF NOT EXISTS Customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    user_account_id INT NOT NULL,
    total_spent DECIMAL(8,2) DEFAULT 0.00,
    FOREIGN KEY (user_account_id) REFERENCES User_Accounts(account_id) ON DELETE CASCADE
);

-- 8. Rentals Table (Tracks Movie Rentals)
CREATE TABLE IF NOT EXISTS Rentals (
    rental_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    movie_id INT NOT NULL,
    rental_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    return_date DATE,
    status ENUM('rented', 'returned') DEFAULT 'rented',
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE CASCADE,
    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id) ON DELETE CASCADE
);

-- 9. Payments Table (Rental Payment Tracking)
CREATE TABLE IF NOT EXISTS Payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    rental_id INT NOT NULL,
    amount DECIMAL(6,2) NOT NULL,
    payment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    payment_method ENUM('Credit Card', 'Debit Card', 'PayPal') NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE CASCADE,
    FOREIGN KEY (rental_id) REFERENCES Rentals(rental_id) ON DELETE CASCADE
);

-- 10. Watchlist Table (Users Save Movies for Later)
CREATE TABLE IF NOT EXISTS Watchlist (
    watchlist_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    movie_id INT NOT NULL,
    added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE CASCADE,
    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id) ON DELETE CASCADE
);

-- 11. Favorites Table (Users Favorite Movies)
CREATE TABLE IF NOT EXISTS Favorites (
    favorite_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    movie_id INT NOT NULL,
    added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE CASCADE,
    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id) ON DELETE CASCADE
);

-- 12. Reviews Table (Users Can Leave Reviews)
CREATE TABLE IF NOT EXISTS Reviews (
    review_id INT AUTO_INCREMENT PRIMARY KEY,
    movie_id INT NOT NULL,
    customer_id INT NOT NULL,
    review_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    rating TINYINT NOT NULL,
    comment TEXT,
    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id) ON DELETE CASCADE,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE CASCADE
);

-- Insert default Genres data
INSERT INTO Genres (genre_name) VALUES
('Sci-Fi'), ('Action'), ('Family'), ('Romance'), ('Comedy'), ('Fantasy')
ON DUPLICATE KEY UPDATE genre_name = genre_name;

-- Insert Movies Table Data (21 Movies)
INSERT INTO Movies (title, year, rating, price, image) VALUES
('Interstellar', 2014, 'PG-13', 13.99, 'interstellar.jpg'),
('The Matrix', 1999, 'R', 12.99, 'the_matrix.jpg'),
('The Matrix Reloaded', 2003, 'R', 2.99, 'the_matrix_reloaded.jpg'),
('The Dark Knight', 2008, 'PG-13', 13.99, 'the_dark_knight.jpg'),
('Inception', 2010, 'PG-13', 13.99, 'inception.jpg'),
('Frozen', 2013, 'PG', 3.99, 'frozen.jpg'),
('50 First Dates', 2004, 'PG-13', 12.99, '50_first_dates.jpg'),
('Holes', 2003, 'PG', 12.99, 'holes.jpg'),
('Harry Potter and the Sorcerer''s Stone', 2001, 'PG', 13.99, 'harry_potter_sorcerers_stone.jpg'),
('Harry Potter and the Chamber of Secrets', 2002, 'PG', 13.99, 'harry_potter_chamber.jpg'),
('Harry Potter and the Prisoner of Azkaban', 2004, 'PG', 13.99, 'harry_potter_prisoner.jpg'),
('Harry Potter and the Goblet of Fire', 2005, 'PG-13', 13.99, 'harry_potter_goblet.jpg'),
('Harry Potter and the Order of the Phoenix', 2007, 'PG-13', 13.99, 'harry_potter_order.jpg'),
('Harry Potter and the Half-Blood Prince', 2009, 'PG-13', 13.99, 'harry_potter_half_blood.jpg'),
('Harry Potter and the Deathly Hallows Part 1', 2010, 'PG-13', 13.99, 'harry_potter_deathly_hallows_1.jpg'),
('Harry Potter and the Deathly Hallows Part 2', 2015, 'PG-13', 13.99, 'harry_potter_deathly_hallows_2.jpg'),
('Spongebob the Movie', 2004, 'PG', 12.99, 'spongebob_movie.jpg'),
('Tangled', 2010, 'PG', 13.99, 'tangled.jpg'),
('Despicable Me', 2010, 'PG', 13.99, 'despicable_me.jpg'),
('Avatar', 2009, 'PG-13', 13.99, 'avatar.jpg'),
('Forrest Gump', 1994, 'PG-13', 12.99, 'forrest_gump.jpg')
ON DUPLICATE KEY UPDATE title = title;

-- Insert MovieGenres Data
INSERT INTO MovieGenres (movie_id, genre_id) VALUES
(1, 1), (1, 6), 
(2, 1), (2, 2),  
(3, 1), (3, 2),  
(4, 2),          
(5, 1), (5, 2),  
(6, 3), (6, 6),  
(7, 4), (7, 5),  
(8, 3), (8, 5),  
(9, 6), (9, 3),  
(10, 6), (10, 3),
(11, 6), 
(12, 6),
(13, 6),
(14, 6),
(15, 6),
(16, 6),
(17, 3), (17, 5),  
(18, 3), (18, 6),  
(19, 3), (19, 5),  
(20, 1), (20, 6),  
(21, 4), (21, 5)
ON DUPLICATE KEY UPDATE movie_id = movie_id;

-- Insert an Admin User (if not already present)
INSERT INTO Logins (username, password, role)
VALUES ('admin', '$2b$12$SO6tkJhJmXQNp30dP1QgKexywVf4OJuKGsTOgVbks4iJPWAgLvZCq', 'admin')
ON DUPLICATE KEY UPDATE username = username;

-- Check inserted data
SELECT * FROM Movies;
SELECT * FROM logins;
SELECT * FROM User_Accounts;
SELECT * FROM customers;
SELECT * FROM moviegenres;
DELETE FROM Movies WHERE movie_id BETWEEN 23 AND 43;

UPDATE add 

SELECT * FROM User_Accounts WHERE login_id = current_user

-- 1️⃣ Drop the old foreign key (if it exists)
ALTER TABLE Reviews DROP FOREIGN KEY Reviews_ibfk_2;

-- 2️⃣ Rename `customer_id` to `account_id`
ALTER TABLE Reviews CHANGE COLUMN customer_id account_id INT NOT NULL;

-- 3️⃣ Add a new foreign key linking to `User_Accounts`
ALTER TABLE Reviews 
ADD FOREIGN KEY (account_id) REFERENCES User_Accounts(account_id) ON DELETE CASCADE;



ALTER TABLE User_Accounts 
DROP FOREIGN KEY user_accounts_ibfk_1;

ALTER TABLE User_Accounts 
ADD CONSTRAINT user_accounts_fk
FOREIGN KEY (login_id) REFERENCES Logins(login_id) ON DELETE CASCADE;

INSERT INTO User_Accounts (account_id, login_id, first_name, last_name, phone)
VALUES (1, 1, 'Matthew', 'Huckman', '3615421725')
ON DUPLICATE KEY UPDATE 
    first_name = VALUES(first_name), 
    last_name = VALUES(last_name), 
    phone = VALUES(phone);

