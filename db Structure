--- 1. Create
CREATE DATABASE IF NOT EXISTS movie_rental;
USE movie_rental;

-- 2. Genres Table
CREATE TABLE IF NOT EXISTS Genres (
    genre_id INT AUTO_INCREMENT PRIMARY KEY,
    genre_name VARCHAR(50) NOT NULL UNIQUE
);

-- 3. Movies Table
CREATE TABLE IF NOT EXISTS Movies (
    movie_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    year INT,
    rating VARCHAR(10),
    price DECIMAL(5,2),
    image VARCHAR(100) DEFAULT 'default.jpg'
);

-- 4. MovieGenres Table (Many-to-Many Relationship)
CREATE TABLE IF NOT EXISTS MovieGenres (
    movie_id INT,
    genre_id INT,
    PRIMARY KEY (movie_id, genre_id),
    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES Genres(genre_id) ON DELETE CASCADE
);

-- 5. Users Table
CREATE TABLE IF NOT EXISTS Users (
    account_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL, 
    role ENUM('admin', 'user') DEFAULT 'user',
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100) UNIQUE,
    phone VARCHAR(15)
);

-- 6. Transactions Table
CREATE TABLE IF NOT EXISTS Transactions (
    transaction_id INT AUTO_INCREMENT PRIMARY KEY,
    account_id INT NOT NULL,
    total_price DECIMAL(10,2) NOT NULL,
    payment_status VARCHAR(20) NOT NULL,
    purchase_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    payment_method VARCHAR(50),
    FOREIGN KEY (account_id) REFERENCES Users(account_id) ON DELETE CASCADE
);



-- 7. Rentals Table
CREATE TABLE  Rentals (
    rental_id INT AUTO_INCREMENT PRIMARY KEY,
    account_id INT NOT NULL,
    movie_id INT NOT NULL,
    rental_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    return_date DATE,
    status ENUM('rented', 'returned') DEFAULT 'rented',
    transaction_id INT,
    FOREIGN KEY (account_id) REFERENCES Users(account_id) ON DELETE CASCADE,
    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id) ON DELETE CASCADE,
    FOREIGN KEY (transaction_id) REFERENCES Transactions(transaction_id) ON DELETE CASCADE
);

-- 7. Payments Table
CREATE TABLE Payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    account_id INT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    payment_method VARCHAR(50) NOT NULL,
    FOREIGN KEY (account_id) REFERENCES Users(account_id) ON DELETE CASCADE
);

-- 8. Watchlist Table
CREATE TABLE Watchlist (
    watchlist_id INT AUTO_INCREMENT PRIMARY KEY,
    account_id INT NOT NULL,
    movie_id INT NOT NULL,
    added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (account_id) REFERENCES Users(account_id) ON DELETE CASCADE,
    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id) ON DELETE CASCADE
);
--- 9. rReviews
CREATE TABLE Reviews (
    review_id INT AUTO_INCREMENT PRIMARY KEY,
    movie_id INT NOT NULL,
    account_id INT NOT NULL,
    review_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    rating TINYINT NOT NULL,
    comment TEXT,
    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id) ON DELETE CASCADE,
    FOREIGN KEY (account_id) REFERENCES Users(account_id) ON DELETE CASCADE
);

CREATE TABLE Comments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    review_id INT NOT NULL,
    username VARCHAR(255) NOT NULL,
    text TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (review_id) REFERENCES Reviews(review_id) ON DELETE CASCADE
);
-- Insert Sample Data

-- Insert default Genres data
INSERT INTO Genres (genre_name) VALUES
('Sci-Fi'), ('Action'), ('Family'), ('Romance'), ('Comedy'), ('Fantasy')
ON DUPLICATE KEY UPDATE genre_name = genre_name;

-- Insert Movies Data (21 Movies)
INSERT INTO Movies (title, year, rating, price, image) VALUES
('Interstellar', 2014, 'PG-13', 13.99, 'interstellar.jpg'),
('The Matrix', 1999, 'R', 12.99, 'the_matrix.jpg'),
('The Matrix Reloaded', 2003, 'R', 2.99, 'the_matrix_reloaded.jpg'),
('The Dark Knight', 2008, 'PG-13', 13.99, 'the_dark_knight.jpg'),
('Inception', 2010, 'PG-13', 13.99, 'inception.jpg'),
('Frozen', 2013, 'PG', 3.99, 'frozen.jpg'),
('50 First Dates', 2004, 'PG-13', 12.99, '50_first_dates.jpg'),
('Holes', 2003, 'PG', 12.99, 'holes.jpg'),
('Harry Potter and the Sorcerer\'s Stone', 2001, 'PG', 13.99, 'harry_potter_sorcerers_stone.jpg'),
('Harry Potter and the Chamber of Secrets', 2002, 'PG', 13.99, 'harry_potter_chamber.jpg'),
('Harry Potter and the Prisoner of Azkaban', 2004, 'PG', 13.99, 'harry_potter_prisoner.jpg'),
('Harry Potter and the Goblet of Fire', 2005, 'PG-13', 13.99, 'harry_potter_goblet.jpg'),
('Harry Potter and the Order of the Phoenix', 2007, 'PG-13', 13.99, 'harry_potter_order.jpg'),
('Harry Potter and the Half-Blood Prince', 2009, 'PG-13', 13.99, 'harry_potter_half_blood.jpg'),
('Harry Potter and the Deathly Hallows Part 1', 2010, 'PG-13', 13.99, 'harry_potter_deathly_hallows_1.jpg'),
('Harry Potter and the Deathly Hallows Part 2', 2015, 'PG-13', 13.99, 'harry_potter_deathly_hallows_2.jpg'),
('Spongebob the Movie', 2004, 'PG', 12.99, 'spongebob_movie.jpg'),
('Tangled', 2010, 'PG', 13.99, 'tangled.jpg'),
('Despicable Me', 2010, 'PG', 13.99, 'despicable_me.jpg'),
('Avatar', 2009, 'PG-13', 13.99, 'avatar.jpg'),
('Forrest Gump', 1994, 'PG-13', 12.99, 'forrest_gump.jpg')
ON DUPLICATE KEY UPDATE title = title;

-- Insert MovieGenres Data
INSERT INTO MovieGenres (movie_id, genre_id) VALUES
(1, 1), (1, 6), 
(2, 1), (2, 2),  
(3, 1), (3, 2),  
(4, 2),          
(5, 1), (5, 2),  
(6, 3), (6, 6),  
(7, 4), (7, 5),  
(8, 3), (8, 5),  
(9, 6), (9, 3),  
(10, 6), (10, 3),
(11, 6), 
(12, 6),
(13, 6),
(14, 6),
(15, 6),
(16, 6),
(17, 3), (17, 5),  
(18, 3), (18, 6),  
(19, 3), (19, 5),  
(20, 1), (20, 6),  
(21, 4), (21, 5)
ON DUPLICATE KEY UPDATE movie_id = movie_id;

select * from users;

INSERT INTO Users (username, password, role, first_name, last_name, email, phone)
VALUES (
  'admin', 
  '$2b$12$hfnwCgwYy4gPGKBl6iKrrOkkVP94sSqAXqaeOyZ2cZ4uJ4veDeQpO', 
  'Admin', 
  'Matt', 
  'H', 
  'admin@example.com', 
  '1234567890'
)
